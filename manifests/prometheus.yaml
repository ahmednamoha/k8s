apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: voip
  labels:
    app: prometheus-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-server
  template:
    metadata:
      labels:
        app: prometheus-server
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v2.19.3
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-storage-volume
              mountPath: /prometheus/
        - name: sidecar
          image: gcr.io/stackdriver-prometheus/stackdriver-prometheus-sidecar:0.8.2
          imagePullPolicy: Always
          args:
            - --stackdriver.project-id=$(PROJECT_ID)
            - --prometheus.wal-directory=/prometheus/wal
            - --stackdriver.kubernetes.location=$(ZONE)
            - --stackdriver.kubernetes.cluster-name=$(CLUSTER_NAME)
          ports:
            - name: sidecar
              containerPort: 9091
          volumeMounts:
            - name: prometheus-storage-volume
              mountPath: /prometheus
            - name: google-service-account
              mountPath: /var/secrets/google
          env:
            - name: CLUSTER_NAME
              valueFrom:
                configMapKeyRef:
                  name: cluster-details
                  key: clusterName
            - name: PROJECT_ID
              valueFrom:
                configMapKeyRef:
                  name: gcp-project
                  key: projectId
            - name: ZONE
              valueFrom:
                configMapKeyRef:
                  name: cluster-details
                  key: zone
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /var/secrets/google/key.json
      volumes:
        - name: google-service-account
          secret:
            secretName: google-service-account
        - name: prometheus-config-volume
          configMap:
            defaultMode: 420
            name: prometheus-server-conf
        - name: prometheus-storage-volume
          emptyDir: {}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  namespace: voip
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  namespace: voip
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: default
    namespace: voip
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-server-conf
  labels:
    name: prometheus-server-conf
  namespace: voip
data:
  prometheus.rules: |-
    groups:
    - name: devopscube demo alert
      rules:
      - alert: High Pod Memory
        expr: sum(container_memory_usage_bytes) > 1
        for: 1m
        labels:
          severity: slack
        annotations:
          summary: High Memory Usage
  prometheus.yml: |-
    global:
      scrape_interval: 60s
      evaluation_interval: 5s
    rule_files:
      - /etc/prometheus/prometheus.rules
    alerting:
      alertmanagers:
      - scheme: http
        static_configs:
        - targets:
          - "alertmanager.prometheus.svc:9093"
    scrape_configs:
      - job_name: 'kubernetes-service-endpoints-all'
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name
        metric_relabel_configs:
        - source_labels: [ __name__ ]
          regex: '(rtpengine_ports.*|rtpengine_sessions.*|gnatsd_varz_remotes.*|gnatsd_varz_in_msgs.*|gnatsd_varz_out_msgs.*|gnatsd_varz_subscriptions.*|gnatsd_varz_total_connections.*|mysql_global_status_connections.*|kamailio_.*|asterisk_.*|vtgate_mysql_server_conn_count.*|vttablet_conn_pool_active.*|vttablet_conn_pool_capacity.*|mysql_global_status_queries.*|mysql_global_variables_innodb_buffer_pool_size.*|mysql_global_status_thread.*|mysql_global_status_select_.*|mysql_global_status_questions.*)'
          action: keep

      - job_name: 'kubernetes-service-endpoints-mysql'
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name
        metric_relabel_configs:
        - source_labels: [command]
          regex: '(insert|delete|update|select)'
          action: keep
